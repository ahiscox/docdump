; Supervisord configuration for docdump project
; Event handlers are called in case of crashes or if the backend should exit.


[unix_http_server]
file=/tmp/supervisor.sock   ; (the path to the socket file)


[inet_http_server]         ; inet (TCP) server disabled by default
port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)

[supervisord]
logfile=/var/log/supervisord/supervisord.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10          ; (num of main logfile rotation backups;default 10)
loglevel=info               ; (log level;default info; others: debug,warn,trace)
pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false              ; (start in foreground if true;default false)
minfds=1024                 ; (min. avail startup file descriptors;default 1024)
minprocs=200                ; (min. avail process descriptors;default 200)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket

[program:ddbackend]
; command=/usr/local/bin/pidproxy /tmp/paster.pid /usr/local/bin/startdocdumpserver
command=/usr/bin/env python /home/ahiscox/code/dd/scan.py
redirect_stderr=false
autostart=false
autorestart=false
stderr_events_enabled=true
stdout_logfile=/var/log/docdump/stdout.log        ; stdout log path, NONE for none; default AUTO
stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
stdout_events_enabled=false   ; emit events on stdout writes (default false)
stderr_logfile=/var/log/docdump/stderr.log        ; stderr log path, NONE for none; default AUTO
stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
stderr_logfile_backups=10        ; # of stderr logfile backups (default 10)

[eventlistener:ddError]
command=/usr/bin/env python /home/ahiscox/code/dd/events.py
events=PROCESS_LOG_STDERR

;[eventlistener:ddStart]
;command=/usr/bin/env python event_start.py
;events=PROCESS_STATE_STARTING

;[eventlistener:ddExit]
;command=/usr/bin/env python event_exit.py
;events=PROCESS_STATE_EXITED

[unix_http_server]
file=/tmp/supervisor.sock   ; (the path to the socket file)


[inet_http_server]         ; inet (TCP) server disabled by default
port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)

[supervisord]
logfile=/var/log/supervisord/supervisord.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10          ; (num of main logfile rotation backups;default 10)
loglevel=info               ; (log level;default info; others: debug,warn,trace)
pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false              ; (start in foreground if true;default false)
minfds=1024                 ; (min. avail startup file descriptors;default 1024)
minprocs=200                ; (min. avail process descriptors;default 200)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket

[program:ddbackend]
; command=/usr/local/bin/pidproxy /tmp/paster.pid /usr/local/bin/startdocdumpserver
command=/usr/bin/env python /home/ahiscox/code/dd/scan.py
redirect_stderr=false
autostart=false
autorestart=false
stderr_events_enabled=true
stdout_logfile=/var/log/docdump/stdout.log        ; stdout log path, NONE for none; default AUTO
stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
stdout_events_enabled=false   ; emit events on stdout writes (default false)
stderr_logfile=/var/log/docdump/stderr.log        ; stderr log path, NONE for none; default AUTO
stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
stderr_logfile_backups=10        ; # of stderr logfile backups (default 10)

[eventlistener:ddError]
command=/usr/bin/env python /home/ahiscox/code/dd/events.py
events=PROCESS_LOG_STDERR

;[eventlistener:ddStart]
;command=/usr/bin/env python event_start.py
;events=PROCESS_STATE_STARTING

;[eventlistener:ddExit]
;command=/usr/bin/env python event_exit.py
;events=PROCESS_STATE_EXITED

[unix_http_server]
file=/tmp/supervisor.sock   ; (the path to the socket file)


[inet_http_server]         ; inet (TCP) server disabled by default
port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)

[supervisord]
logfile=/var/log/supervisord/supervisord.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10          ; (num of main logfile rotation backups;default 10)
loglevel=info               ; (log level;default info; others: debug,warn,trace)
pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false              ; (start in foreground if true;default false)
minfds=1024                 ; (min. avail startup file descriptors;default 1024)
minprocs=200                ; (min. avail process descriptors;default 200)

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket

[program:ddbackend]
; command=/usr/local/bin/pidproxy /tmp/paster.pid /usr/local/bin/startdocdumpserver
command=/usr/bin/env python /home/ahiscox/code/dd/scan.py
redirect_stderr=false
autostart=false
autorestart=false
stderr_events_enabled=true
stdout_logfile=/var/log/docdump/stdout.log        ; stdout log path, NONE for none; default AUTO
stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
stdout_events_enabled=false   ; emit events on stdout writes (default false)
stderr_logfile=/var/log/docdump/stderr.log        ; stderr log path, NONE for none; default AUTO
stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
stderr_logfile_backups=10        ; # of stderr logfile backups (default 10)

[eventlistener:ddError]
command=/usr/bin/env python /home/ahiscox/code/dd/events.py
events=PROCESS_LOG_STDERR

;[eventlistener:ddStart]
;command=/usr/bin/env python event_start.py
;events=PROCESS_STATE_STARTING

;[eventlistener:ddExit]
;command=/usr/bin/env python event_exit.py
;events=PROCESS_STATE_EXITED
